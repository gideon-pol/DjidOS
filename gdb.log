
Breakpoint 3, PMM::Initialize (area=area@entry=0x12ddc8) at src/kernel/memory/pmm.cpp:31
31	        bitmap = Bitmap(bitmapBuffer, bitmapCount, bitmapSize);
Bitmap::Bitmap (this=0xffffff800002db88, map=0xffffff80000349eb "", count=64, size=9) at src/common/bitmap.cpp:3
3	Bitmap::Bitmap(uint8_t* map, uint64_t count, uint64_t size){
4	    Map = map;
5	    Count = count;
6	    Size = size;

Breakpoint 3, PMM::Initialize (area=area@entry=0x12ddc8) at src/kernel/memory/pmm.cpp:31
31	        bitmap = Bitmap(bitmapBuffer, bitmapCount, bitmapSize);
Bitmap::Bitmap (this=0xffffff800002db88, map=0xffffff80000349eb "", count=64, size=9) at src/common/bitmap.cpp:3
3	Bitmap::Bitmap(uint8_t* map, uint64_t count, uint64_t size){
4	    Map = map;
5	    Count = count;
6	    Size = size;

Breakpoint 3, PMM::Initialize (area=area@entry=0x12ddc8) at src/kernel/memory/pmm.cpp:31
31	        bitmap = Bitmap(bitmapBuffer, bitmapCount, bitmapSize);
Bitmap::Bitmap (this=0xffffff800002db88, map=0xffffff80000349eb "", count=64, size=9) at src/common/bitmap.cpp:3
3	Bitmap::Bitmap(uint8_t* map, uint64_t count, uint64_t size){
4	    Map = map;
5	    Count = count;
6	    Size = size;

Breakpoint 3, PMM::Initialize (area=area@entry=0x12ddc8) at src/kernel/memory/pmm.cpp:31
31	        bitmap = Bitmap(bitmapBuffer, bitmapCount, bitmapSize);
Attempt to use a type name as an expression
non-unique member `Bitmap' requires type instantiation
A syntax error in expression, near `Scheduler::ScheduleNext'.
Dump of assembler code for function Bitmap::Bitmap(unsigned char*, unsigned long, unsigned long):
   0xffffff8000010000 <+0>:	endbr64 
   0xffffff8000010004 <+4>:	endbr64 
   0xffffff8000010008 <+8>:	mov    %rsi,0x8(%rdi)
   0xffffff800001000c <+12>:	mov    %rdx,(%rdi)
   0xffffff800001000f <+15>:	mov    %rcx,0x10(%rdi)
   0xffffff8000010013 <+19>:	retq   
End of assembler dump.
Bitmap::Bitmap (this=0xffffff800002db88, map=0xffffff80000349eb "", count=64, size=9) at src/common/bitmap.cpp:3
3	Bitmap::Bitmap(uint8_t* map, uint64_t count, uint64_t size){
4	    Map = map;
5	    Count = count;
6	    Size = size;
0xffffff8000010013	6	    Size = size;
0xffffff8000015634 in PMM::Initialize (area=area@entry=0x12ddc8) at src/kernel/memory/pmm.cpp:31
31	        bitmap = Bitmap(bitmapBuffer, bitmapCount, bitmapSize);
Quit
Detaching from program: , process 1
Remote communication error.  Target disconnected.: Broken pipe.

Breakpoint 2, PMM::Initialize (area=0x11f478) at src/kernel/memory/pmm.cpp:30
30	        uint8_t* bitmapBuffer = (uint8_t*)&_KernelEnd;
$1 = 1000000
Undefined command: "line".  Try "help".
Function "0xffffff800001fff0" not defined.
Dump of assembler code for function _ZN3PMM16pageAllocateLockE:
   0xffffff800001fff0 <+0>:	add    %al,(%rax)
End of assembler dump.
Dump of assembler code for function _ZN3PMM16pageAllocateLockE:
   0xffffff800001fff0 <+0>:	add    %al,(%rax)
End of assembler dump.
Error detected on fd 0
error detected on stdin
Remote communication error.  Target disconnected.: Broken pipe.

Breakpoint 2, PMM::Initialize (area=0x121b98) at src/kernel/memory/pmm.cpp:30
30	    }
$1 = 1000000
Dump of assembler code for function WindowTask1():
   0xffffff80000169b9 <+0>:	endbr64 
   0xffffff80000169bd <+4>:	push   %rbp
   0xffffff80000169be <+5>:	mov    %rsp,%rbp
   0xffffff80000169c1 <+8>:	push   %r15
   0xffffff80000169c3 <+10>:	push   %r12
   0xffffff80000169c5 <+12>:	push   %rbx
   0xffffff80000169c6 <+13>:	sub    $0x28,%rsp
   0xffffff80000169ca <+17>:	endbr64 
   0xffffff80000169ce <+21>:	lea    -0xb(%rip),%rbx        # 0xffffff80000169ca <WindowTask1()+17>
   0xffffff80000169d5 <+28>:	movabs $0x229b6,%r11
   0xffffff80000169df <+38>:	add    %r11,%rbx
   0xffffff80000169e2 <+41>:	movabs $0xffffffffffffffb8,%rdx
   0xffffff80000169ec <+51>:	mov    (%rbx,%rdx,1),%rdx
   0xffffff80000169f0 <+55>:	movzwl (%rdx),%edx
   0xffffff80000169f3 <+58>:	shr    %dx
   0xffffff80000169f6 <+61>:	movzwl %dx,%edx
   0xffffff80000169f9 <+64>:	mov    %edx,%ecx
   0xffffff80000169fb <+66>:	movabs $0xffffffff00000000,%rdx
   0xffffff8000016a05 <+76>:	and    %rdx,%rax
   0xffffff8000016a08 <+79>:	or     %rcx,%rax
   0xffffff8000016a0b <+82>:	movabs $0xffffffffffffffb8,%rdx
   0xffffff8000016a15 <+92>:	mov    (%rbx,%rdx,1),%rdx
   0xffffff8000016a19 <+96>:	movzwl 0x2(%rdx),%edx
   0xffffff8000016a1d <+100>:	shr    %dx
   0xffffff8000016a20 <+103>:	movzwl %dx,%edx
   0xffffff8000016a23 <+106>:	mov    %edx,%edx
   0xffffff8000016a25 <+108>:	shl    $0x20,%rdx
   0xffffff8000016a29 <+112>:	mov    %eax,%eax
   0xffffff8000016a2b <+114>:	or     %rdx,%rax
   0xffffff8000016a2e <+117>:	mov    %rax,%rdi
   0xffffff8000016a31 <+120>:	mov    %rbx,%r15
   0xffffff8000016a34 <+123>:	movabs $0xfffffffffffd7fff,%rax
   0xffffff8000016a3e <+133>:	add    %rbx,%rax
   0xffffff8000016a41 <+136>:	callq  *%rax
   0xffffff8000016a43 <+138>:	mov    %rax,-0x38(%rbp)
   0xffffff8000016a47 <+142>:	movl   $0x0,-0x24(%rbp)
   0xffffff8000016a4e <+149>:	movl   $0x0,-0x28(%rbp)
   0xffffff8000016a55 <+156>:	cmpl   $0x0,-0x28(%rbp)
   0xffffff8000016a59 <+160>:	jg     0xffffff8000016ada <WindowTask1()+289>
   0xffffff8000016a5b <+162>:	movb   $0x0,-0x3c(%rbp)
   0xffffff8000016a5f <+166>:	movb   $0x0,-0x3b(%rbp)
   0xffffff8000016a63 <+170>:	movb   $0xff,-0x3a(%rbp)
   0xffffff8000016a67 <+174>:	movb   $0xff,-0x39(%rbp)
   0xffffff8000016a6b <+178>:	movl   $0x0,-0x2c(%rbp)
   0xffffff8000016a72 <+185>:	cmpl   $0x63,-0x2c(%rbp)
   0xffffff8000016a76 <+189>:	jg     0xffffff8000016ad1 <WindowTask1()+280>
   0xffffff8000016a78 <+191>:	mov    -0x38(%rbp),%rax
   0xffffff8000016a7c <+195>:	mov    (%rax),%r12
   0xffffff8000016a7f <+198>:	mov    -0x38(%rbp),%rax
   0xffffff8000016a83 <+202>:	mov    %rax,%rdi
   0xffffff8000016a86 <+205>:	mov    %rbx,%r15
   0xffffff8000016a89 <+208>:	movabs $0xfffffffffffd7f9a,%rax
   0xffffff8000016a93 <+218>:	add    %rbx,%rax
   0xffffff8000016a96 <+221>:	callq  *%rax
   0xffffff8000016a98 <+223>:	imul   -0x28(%rbp),%eax
   0xffffff8000016a9c <+227>:	movslq %eax,%rdx
   0xffffff8000016a9f <+230>:	mov    -0x2c(%rbp),%eax
   0xffffff8000016aa2 <+233>:	cltq   
   0xffffff8000016aa4 <+235>:	add    %rdx,%rax
   0xffffff8000016aa7 <+238>:	shl    $0x2,%rax
   0xffffff8000016aab <+242>:	add    %rax,%r12
   0xffffff8000016aae <+245>:	lea    -0x3c(%rbp),%rax
   0xffffff8000016ab2 <+249>:	mov    %rax,%rdi
   0xffffff8000016ab5 <+252>:	mov    %rbx,%r15
   0xffffff8000016ab8 <+255>:	movabs $0xfffffffffffd8398,%rax
   0xffffff8000016ac2 <+265>:	add    %rbx,%rax
   0xffffff8000016ac5 <+268>:	callq  *%rax
   0xffffff8000016ac7 <+270>:	mov    %eax,(%r12)
   0xffffff8000016acb <+274>:	addl   $0x1,-0x2c(%rbp)
   0xffffff8000016acf <+278>:	jmp    0xffffff8000016a72 <WindowTask1()+185>
   0xffffff8000016ad1 <+280>:	addl   $0x1,-0x28(%rbp)
   0xffffff8000016ad5 <+284>:	jmpq   0xffffff8000016a55 <WindowTask1()+156>
   0xffffff8000016ada <+289>:	mov    -0x38(%rbp),%rax
   0xffffff8000016ade <+293>:	mov    %rax,%rdi
   0xffffff8000016ae1 <+296>:	mov    %rbx,%r15
   0xffffff8000016ae4 <+299>:	movabs $0xfffffffffffd7fcc,%rax
   0xffffff8000016aee <+309>:	add    %rbx,%rax
   0xffffff8000016af1 <+312>:	callq  *%rax
   0xffffff8000016af3 <+314>:	addl   $0x1,-0x24(%rbp)
   0xffffff8000016af7 <+318>:	jmpq   0xffffff8000016a4e <WindowTask1()+149>
End of assembler dump.
Quit
Detaching from program: , process 1
Remote communication error.  Target disconnected.: Broken pipe.

Breakpoint 2, PMM::Initialize (area=0x121ba0) at src/kernel/memory/pmm.cpp:30
30	    }
$1 = 1000000
Detaching from program: , process 1
Remote communication error.  Target disconnected.: Broken pipe.

Program received signal SIGINT, Interrupt.
kernel_main (info=...) at src/kernel/main.cpp:253
253	}
Detaching from program: , process 1
Ending remote debugging.
[Inferior 1 (process 1) detached]

Breakpoint 2, InterruptManager::HandleInterrupt (frame=0xffffff8000031df0) at src/kernel/interrupt.cpp:203
203	    }
$1 = 1000000
0xffffff800001f3d9 in isr_wrapper ()
Single stepping until exit from function isr_wrapper,
which has no line number information.
kernel_main (info=...) at src/kernel/main.cpp:253
253	}
prekernel (multiboot_info_addr=1186528) at src/kernel/main.cpp:75
75	}
[Inferior 1 (process 1) exited normally]

Breakpoint 2, InterruptManager::HandleInterrupt (frame=0xffffff8000031df0) at src/kernel/interrupt.cpp:203
203	    }
$1 = 1000000
0xffffff800001f3d9 in isr_wrapper ()
0xffffff800001f3dc in isr_wrapper ()
0xffffff800001f3de in isr_wrapper ()
0xffffff800001f3e0 in isr_wrapper ()
0xffffff800001f3e2 in isr_wrapper ()
0xffffff800001f3e4 in isr_wrapper ()
0xffffff800001f3e5 in isr_wrapper ()
0xffffff800001f3e6 in isr_wrapper ()
0xffffff800001f3e7 in isr_wrapper ()
0xffffff800001f3e8 in isr_wrapper ()
0xffffff800001f3e9 in isr_wrapper ()
0xffffff800001f3ea in isr_wrapper ()
0xffffff800001f3ee in isr_wrapper ()
kernel_main (info=...) at src/kernel/main.cpp:253
253	}
0xffffff8000016f8b	253	}
0xffffff8000016f8f	253	}
0xffffff8000016f90	253	}
0xffffff8000016f92	253	}
prekernel (multiboot_info_addr=1186528) at src/kernel/main.cpp:75
75	}
Quit
Detaching from program: , process 1
Remote communication error.  Target disconnected.: Broken pipe.

Breakpoint 3, Scheduler::Schedule (state=0xffffff8000031e08) at src/kernel/scheduling/scheduler.cpp:105
105	    void Schedule(cpu_state* state){
106	        if(currentTask != -1){
108	        } else if(idle->IsAlive){
112	        if(taskCount == 0){
113	            currentTask = -1;
114	            idle->CpuTime++;
115	            load_cpu_state(idle->State);

Breakpoint 3, Scheduler::Schedule (state=0x0) at src/kernel/scheduling/scheduler.cpp:105
105	    void Schedule(cpu_state* state){
106	        if(currentTask != -1){
108	        } else if(idle->IsAlive){
112	        if(taskCount == 0){
113	            currentTask = -1;
114	            idle->CpuTime++;
115	            load_cpu_state(idle->State);
[Inferior 1 (process 1) exited normally]

Breakpoint 3, Scheduler::Schedule (state=0xffffff8000031e08) at src/kernel/scheduling/scheduler.cpp:105
105	    void Schedule(cpu_state* state){
106	        if(currentTask != -1){
108	        } else if(idle->IsAlive){
112	        if(taskCount == 0){
113	            currentTask = -1;
114	            idle->CpuTime++;
115	            load_cpu_state(idle->State);

Breakpoint 3, Scheduler::Schedule (state=0x0) at src/kernel/scheduling/scheduler.cpp:105
105	    void Schedule(cpu_state* state){
106	        if(currentTask != -1){
108	        } else if(idle->IsAlive){
112	        if(taskCount == 0){
113	            currentTask = -1;
114	            idle->CpuTime++;
115	            load_cpu_state(idle->State);
0xffffff8000019c13	115	            load_cpu_state(idle->State);
0xffffff8000019c17	115	            load_cpu_state(idle->State);
0xffffff8000019c1b	115	            load_cpu_state(idle->State);
0xffffff8000019c1e	115	            load_cpu_state(idle->State);
0xffffff8000019c21	115	            load_cpu_state(idle->State);
0xffffff8000019c2b	115	            load_cpu_state(idle->State);
0xffffff8000019c2e	115	            load_cpu_state(idle->State);
0xffffff800001f3a2 in load_cpu_state ()
0xffffff800001f3a5 in load_cpu_state ()
0xffffff800001f3a7 in load_cpu_state ()
0xffffff800001f3a9 in load_cpu_state ()
0xffffff800001f3ab in load_cpu_state ()
0xffffff800001f3ad in load_cpu_state ()
0xffffff800001f3ae in load_cpu_state ()
0xffffff800001f3af in load_cpu_state ()
0xffffff800001f3b0 in load_cpu_state ()
0xffffff800001f3b1 in load_cpu_state ()
0xffffff800001f3b2 in load_cpu_state ()
0xffffff800001f3b3 in load_cpu_state ()
0xffffff800001f3b5 in load_cpu_state ()
0xffffff800001f3b7 in load_cpu_state ()
0xffffff800001f3b9 in load_cpu_state ()
0xffffff800001f3bb in load_cpu_state ()
0xffffff800001f3bc in load_cpu_state ()
0xffffff800001f133 in Handler0xD ()
0xffffff800001f13b in Handler0xD ()
0xffffff800001f13f in Handler0xD ()
0xffffff800001f3be in isr_wrapper ()
0xffffff800001f3bf in isr_wrapper ()
Detaching from program: , process 1
Remote communication error.  Target disconnected.: Broken pipe.

Breakpoint 3, Scheduler::Schedule (state=0xc00000) at src/kernel/scheduling/scheduler.cpp:105
105	    void Schedule(cpu_state* state){
106	        if(currentTask != -1){
108	        } else if(idle->IsAlive){
112	        if(taskCount == 0){
113	            currentTask = -1;
114	            idle->CpuTime++;
115	            load_cpu_state(idle->State);

Breakpoint 3, Scheduler::Schedule (state=0x0) at src/kernel/scheduling/scheduler.cpp:105
105	    void Schedule(cpu_state* state){
106	        if(currentTask != -1){
108	        } else if(idle->IsAlive){
Detaching from program: , process 1
Remote communication error.  Target disconnected.: Broken pipe.

Breakpoint 3, Scheduler::Schedule (state=0xc00000) at src/kernel/scheduling/scheduler.cpp:105
105	    void Schedule(cpu_state* state){
106	        if(currentTask != -1){
108	        } else if(idle->IsAlive){
112	        if(taskCount == 0){
113	            currentTask = -1;
114	            idle->CpuTime++;
115	            load_cpu_state(idle->State);
0xffffff8000019c13	115	            load_cpu_state(idle->State);
0xffffff8000019c17	115	            load_cpu_state(idle->State);
0xffffff8000019c1b	115	            load_cpu_state(idle->State);
0xffffff8000019c1e	115	            load_cpu_state(idle->State);
0xffffff8000019c21	115	            load_cpu_state(idle->State);
0xffffff8000019c2b	115	            load_cpu_state(idle->State);
0xffffff8000019c2e	115	            load_cpu_state(idle->State);
0xffffff800001f39e in load_cpu_state ()
0xffffff800001f3a1 in load_cpu_state ()
0xffffff800001f3a3 in load_cpu_state ()
0xffffff800001f3a5 in load_cpu_state ()
0xffffff800001f3a7 in load_cpu_state ()
0xffffff800001f3a9 in load_cpu_state ()
0xffffff800001f3aa in load_cpu_state ()
0xffffff800001f3ab in load_cpu_state ()
rax            0xffffff800001f39e  -549755685986
rbx            0xffffff80000393a8  -549755579480
rcx            0x1                 1
rdx            0x1                 1
rsi            0x0                 0
rdi            0x0                 0
rbp            0xffffff8000031e50  0xffffff8000031e50
rsp            0xffffff90000fffd8  0xffffff90000fffd8
r8             0x0                 0
r9             0x0                 0
r10            0x0                 0
r11            0x0                 0
r12            0xffffff8000031e90  -549755609456
r13            0x0                 0
r14            0x0                 0
r15            0xffffff80000393a8  -549755579480
rip            0xffffff800001f3ab  0xffffff800001f3ab <load_cpu_state+13>
eflags         0x200083            [ ID IOPL=0 SF CF ]
cs             0x8                 8
ss             0x0                 0
ds             0x0                 0
es             0x0                 0
fs             0x18                24
gs             0x18                24
fs_base        0x0                 0
gs_base        0x0                 0
k_gs_base      0x0                 0
cr0            0x80010011          [ PG WP ET PE ]
cr2            0x0                 0
cr3            0x3a000             [ PDBR=0 PCID=0 ]
cr4            0x220               [ OSFXSR PAE ]
cr8            0x0                 0
efer           0x500               [ LMA LME ]
xmm0           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm1           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm2           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm3           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm4           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm5           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm6           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm7           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm8           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm9           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm10          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm11          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm12          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm13          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm14          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm15          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
mxcsr          0x1f80              [ IM DM ZM OM UM PM ]
rax            0xffffff800001f39e  -549755685986
rbx            0xffffff80000393a8  -549755579480
rcx            0x1                 1
rdx            0x1                 1
rsi            0x0                 0
rdi            0x0                 0
rbp            0xffffff8000031e50  0xffffff8000031e50
rsp            0xffffff90000fffd8  0xffffff90000fffd8
r8             0x0                 0
r9             0x0                 0
r10            0x0                 0
r11            0x0                 0
r12            0xffffff8000031e90  -549755609456
r13            0x0                 0
r14            0x0                 0
r15            0xffffff80000393a8  -549755579480
rip            0xffffff800001f3ab  0xffffff800001f3ab <load_cpu_state+13>
eflags         0x200083            [ ID IOPL=0 SF CF ]
cs             0x8                 8
ss             0x0                 0
ds             0x0                 0
es             0x0                 0
fs             0x18                24
gs             0x18                24
fs_base        0x0                 0
gs_base        0x0                 0
k_gs_base      0x0                 0
cr0            0x80010011          [ PG WP ET PE ]
cr2            0x0                 0
cr3            0x3a000             [ PDBR=0 PCID=0 ]
cr4            0x220               [ OSFXSR PAE ]
cr8            0x0                 0
efer           0x500               [ LMA LME ]
xmm0           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm1           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm2           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm3           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm4           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm5           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm6           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm7           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm8           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm9           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm10          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm11          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm12          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm13          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm14          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm15          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
mxcsr          0x1f80              [ IM DM ZM OM UM PM ]
0xffffff800001f3ac in load_cpu_state ()
0xffffff800001f3ad in load_cpu_state ()
0xffffff800001f3ae in load_cpu_state ()
0xffffff800001f3af in load_cpu_state ()
rax            0x0                 0
rbx            0xffffff80000393a8  -549755579480
rcx            0x0                 0
rdx            0x0                 0
rsi            0x0                 0
rdi            0x0                 0
rbp            0x0                 0x0
rsp            0xffffff90000ffff8  0xffffff90000ffff8
r8             0x0                 0
r9             0x0                 0
r10            0x0                 0
r11            0x0                 0
r12            0xffffff8000031e90  -549755609456
r13            0x0                 0
r14            0x0                 0
r15            0xffffff80000393a8  -549755579480
rip            0xffffff800001f3af  0xffffff800001f3af <load_cpu_state+17>
eflags         0x200083            [ ID IOPL=0 SF CF ]
cs             0x8                 8
ss             0x0                 0
ds             0x0                 0
es             0x0                 0
fs             0x18                24
gs             0x18                24
fs_base        0x0                 0
gs_base        0x0                 0
k_gs_base      0x0                 0
cr0            0x80010011          [ PG WP ET PE ]
cr2            0x0                 0
cr3            0x3a000             [ PDBR=0 PCID=0 ]
cr4            0x220               [ OSFXSR PAE ]
cr8            0x0                 0
efer           0x500               [ LMA LME ]
xmm0           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm1           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm2           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm3           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm4           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm5           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm6           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm7           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm8           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm9           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm10          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm11          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm12          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm13          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm14          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm15          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
mxcsr          0x1f80              [ IM DM ZM OM UM PM ]
rax            0x0                 0
rbx            0xffffff80000393a8  -549755579480
rcx            0x0                 0
rdx            0x0                 0
rsi            0x0                 0
rdi            0x0                 0
rbp            0x0                 0x0
rsp            0xffffff90000ffff8  0xffffff90000ffff8
r8             0x0                 0
r9             0x0                 0
r10            0x0                 0
r11            0x0                 0
r12            0xffffff8000031e90  -549755609456
r13            0x0                 0
r14            0x0                 0
r15            0xffffff80000393a8  -549755579480
rip            0xffffff800001f3af  0xffffff800001f3af <load_cpu_state+17>
eflags         0x200083            [ ID IOPL=0 SF CF ]
cs             0x8                 8
ss             0x0                 0
ds             0x0                 0
es             0x0                 0
fs             0x18                24
gs             0x18                24
fs_base        0x0                 0
gs_base        0x0                 0
k_gs_base      0x0                 0
cr0            0x80010011          [ PG WP ET PE ]
cr2            0x0                 0
cr3            0x3a000             [ PDBR=0 PCID=0 ]
cr4            0x220               [ OSFXSR PAE ]
cr8            0x0                 0
efer           0x500               [ LMA LME ]
xmm0           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm1           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm2           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm3           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm4           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm5           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm6           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm7           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm8           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm9           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm10          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm11          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm12          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm13          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm14          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm15          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
mxcsr          0x1f80              [ IM DM ZM OM UM PM ]
0xffffff800001f3b1 in load_cpu_state ()
0xffffff800001f3b3 in load_cpu_state ()
0xffffff800001f3b5 in load_cpu_state ()
0xffffff800001f3b7 in load_cpu_state ()
rax            0x0                 0
rbx            0xffffff80000393a8  -549755579480
rcx            0x0                 0
rdx            0x0                 0
rsi            0x0                 0
rdi            0x0                 0
rbp            0x0                 0x0
rsp            0xffffff9000100018  0xffffff9000100018
r8             0x0                 0
r9             0x0                 0
r10            0x0                 0
r11            0x0                 0
r12            0x0                 0
r13            0x0                 0
r14            0x0                 0
r15            0x0                 0
rip            0xffffff800001f3b7  0xffffff800001f3b7 <load_cpu_state+25>
eflags         0x200083            [ ID IOPL=0 SF CF ]
cs             0x8                 8
ss             0x0                 0
ds             0x0                 0
es             0x0                 0
fs             0x18                24
gs             0x18                24
fs_base        0x0                 0
gs_base        0x0                 0
k_gs_base      0x0                 0
cr0            0x80010011          [ PG WP ET PE ]
cr2            0x0                 0
cr3            0x3a000             [ PDBR=0 PCID=0 ]
cr4            0x220               [ OSFXSR PAE ]
cr8            0x0                 0
efer           0x500               [ LMA LME ]
xmm0           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm1           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm2           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm3           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm4           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm5           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm6           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm7           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm8           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm9           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm10          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm11          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm12          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm13          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm14          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm15          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
mxcsr          0x1f80              [ IM DM ZM OM UM PM ]
0xffffff800001f3b8 in load_cpu_state ()
Scheduler::idleTask () at src/kernel/scheduling/scheduler.cpp:73
73	    void idleTask(){
rax            0x0                 0
rbx            0x0                 0
rcx            0x0                 0
rdx            0x0                 0
rsi            0x0                 0
rdi            0x0                 0
rbp            0x0                 0x0
rsp            0xffffff9000100048  0xffffff9000100048
r8             0x0                 0
r9             0x0                 0
r10            0x0                 0
r11            0x0                 0
r12            0x0                 0
r13            0x0                 0
r14            0x0                 0
r15            0x0                 0
rip            0xffffff8000019827  0xffffff8000019827 <Scheduler::idleTask()>
eflags         0x202               [ IOPL=0 IF ]
cs             0x8                 8
ss             0x0                 0
ds             0x0                 0
es             0x0                 0
fs             0x18                24
gs             0x18                24
fs_base        0x0                 0
gs_base        0x0                 0
k_gs_base      0x0                 0
cr0            0x80010011          [ PG WP ET PE ]
cr2            0x0                 0
cr3            0x3a000             [ PDBR=0 PCID=0 ]
cr4            0x220               [ OSFXSR PAE ]
cr8            0x0                 0
efer           0x500               [ LMA LME ]
xmm0           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm1           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm2           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm3           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm4           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm5           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm6           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm7           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm8           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm9           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm10          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm11          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm12          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm13          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm14          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm15          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
mxcsr          0x1f80              [ IM DM ZM OM UM PM ]
rax            0x0                 0
rbx            0x0                 0
rcx            0x0                 0
rdx            0x0                 0
rsi            0x0                 0
rdi            0x0                 0
rbp            0x0                 0x0
rsp            0xffffff9000100048  0xffffff9000100048
r8             0x0                 0
r9             0x0                 0
r10            0x0                 0
r11            0x0                 0
r12            0x0                 0
r13            0x0                 0
r14            0x0                 0
r15            0x0                 0
rip            0xffffff8000019827  0xffffff8000019827 <Scheduler::idleTask()>
eflags         0x202               [ IOPL=0 IF ]
cs             0x8                 8
ss             0x0                 0
ds             0x0                 0
es             0x0                 0
fs             0x18                24
gs             0x18                24
fs_base        0x0                 0
gs_base        0x0                 0
k_gs_base      0x0                 0
cr0            0x80010011          [ PG WP ET PE ]
cr2            0x0                 0
cr3            0x3a000             [ PDBR=0 PCID=0 ]
cr4            0x220               [ OSFXSR PAE ]
cr8            0x0                 0
efer           0x500               [ LMA LME ]
xmm0           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm1           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm2           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm3           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm4           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm5           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm6           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm7           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm8           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm9           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm10          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm11          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm12          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm13          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm14          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm15          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
mxcsr          0x1f80              [ IM DM ZM OM UM PM ]
Continuing.

Breakpoint 3, Scheduler::Schedule (state=0x0) at src/kernel/scheduling/scheduler.cpp:105
105	    void Schedule(cpu_state* state){
106	        if(currentTask != -1){
108	        } else if(idle->IsAlive){
112	        if(taskCount == 0){
113	            currentTask = -1;
114	            idle->CpuTime++;
115	            load_cpu_state(idle->State);
0xffffff8000019c13	115	            load_cpu_state(idle->State);
0xffffff8000019c17	115	            load_cpu_state(idle->State);
0xffffff8000019c1b	115	            load_cpu_state(idle->State);
0xffffff8000019c1e	115	            load_cpu_state(idle->State);
0xffffff8000019c21	115	            load_cpu_state(idle->State);
0xffffff8000019c2b	115	            load_cpu_state(idle->State);
0xffffff8000019c2e	115	            load_cpu_state(idle->State);
0xffffff800001f39e in load_cpu_state ()
0xffffff800001f3a1 in load_cpu_state ()
0xffffff800001f3a3 in load_cpu_state ()
0xffffff800001f3a5 in load_cpu_state ()
0xffffff800001f3a7 in load_cpu_state ()
0xffffff800001f3a9 in load_cpu_state ()
0xffffff800001f3aa in load_cpu_state ()
0xffffff800001f3ab in load_cpu_state ()
0xffffff800001f3ac in load_cpu_state ()
0xffffff800001f3ad in load_cpu_state ()
0xffffff800001f3ae in load_cpu_state ()
0xffffff800001f3af in load_cpu_state ()
rax            0x0                 0
rbx            0xffffff80000393a8  -549755579480
rcx            0x0                 0
rdx            0x0                 0
rsi            0x0                 0
rdi            0x0                 0
rbp            0x0                 0x0
rsp            0xffffff90000ffff8  0xffffff90000ffff8
r8             0x0                 0
r9             0x0                 0
r10            0x0                 0
r11            0x0                 0
r12            0xffffff90000fffa0  -481035288672
r13            0x0                 0
r14            0x0                 0
r15            0xffffff80000393a8  -549755579480
rip            0xffffff800001f3af  0xffffff800001f3af <load_cpu_state+17>
eflags         0x83                [ IOPL=0 SF CF ]
cs             0x8                 8
ss             0x0                 0
ds             0x0                 0
es             0x0                 0
fs             0x18                24
gs             0x18                24
fs_base        0x0                 0
gs_base        0x0                 0
k_gs_base      0x0                 0
cr0            0x80010011          [ PG WP ET PE ]
cr2            0x0                 0
cr3            0x3a000             [ PDBR=0 PCID=0 ]
cr4            0x220               [ OSFXSR PAE ]
cr8            0x0                 0
efer           0x500               [ LMA LME ]
xmm0           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm1           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm2           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm3           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm4           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm5           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm6           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm7           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm8           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm9           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm10          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm11          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm12          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm13          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm14          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm15          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
mxcsr          0x1f80              [ IM DM ZM OM UM PM ]
0xffffff800001f3b1 in load_cpu_state ()
0xffffff800001f3b3 in load_cpu_state ()
0xffffff800001f3b5 in load_cpu_state ()
0xffffff800001f3b7 in load_cpu_state ()
rax            0x0                 0
rbx            0xffffff80000393a8  -549755579480
rcx            0x0                 0
rdx            0x0                 0
rsi            0x0                 0
rdi            0x0                 0
rbp            0x0                 0x0
rsp            0xffffff9000100018  0xffffff9000100018
r8             0x0                 0
r9             0x0                 0
r10            0x0                 0
r11            0x0                 0
r12            0x0                 0
r13            0x0                 0
r14            0x0                 0
r15            0x0                 0
rip            0xffffff800001f3b7  0xffffff800001f3b7 <load_cpu_state+25>
eflags         0x83                [ IOPL=0 SF CF ]
cs             0x8                 8
ss             0x0                 0
ds             0x0                 0
es             0x0                 0
fs             0x18                24
gs             0x18                24
fs_base        0x0                 0
gs_base        0x0                 0
k_gs_base      0x0                 0
cr0            0x80010011          [ PG WP ET PE ]
cr2            0x0                 0
cr3            0x3a000             [ PDBR=0 PCID=0 ]
cr4            0x220               [ OSFXSR PAE ]
cr8            0x0                 0
efer           0x500               [ LMA LME ]
xmm0           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm1           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm2           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm3           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm4           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm5           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm6           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm7           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm8           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm9           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm10          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm11          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm12          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm13          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm14          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm15          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
mxcsr          0x1f80              [ IM DM ZM OM UM PM ]
Detaching from program: , process 1
Remote communication error.  Target disconnected.: Broken pipe.

Breakpoint 3, Scheduler::Schedule (state=0xc00000) at src/kernel/scheduling/scheduler.cpp:105
105	    void Schedule(cpu_state* state){
Detaching from program: , process 1
Remote communication error.  Target disconnected.: Broken pipe.

Breakpoint 3, Scheduler::Schedule (state=0xc00000) at src/kernel/scheduling/scheduler.cpp:105
105	    void Schedule(cpu_state* state){
Continuing.

Breakpoint 3, Scheduler::Schedule (state=0x0) at src/kernel/scheduling/scheduler.cpp:105
105	    void Schedule(cpu_state* state){
106	        if(currentTask != -1){
108	        } else if(idle->IsAlive){
112	        if(taskCount == 0){
113	            currentTask = -1;
114	            idle->CpuTime++;
115	            load_cpu_state(idle->State);
[Inferior 1 (process 1) exited normally]

Breakpoint 3, Scheduler::Schedule (state=0xc00000) at src/kernel/scheduling/scheduler.cpp:105
105	    void Schedule(cpu_state* state){
106	        if(currentTask != -1){
108	        } else if(idle->IsAlive){
112	        if(taskCount == 0){
113	            currentTask = -1;
114	            idle->CpuTime++;
115	            load_cpu_state(idle->State);
0xffffff8000019c13	115	            load_cpu_state(idle->State);
0xffffff8000019c17	115	            load_cpu_state(idle->State);
0xffffff8000019c1b	115	            load_cpu_state(idle->State);
0xffffff8000019c1e	115	            load_cpu_state(idle->State);
0xffffff8000019c21	115	            load_cpu_state(idle->State);
0xffffff8000019c2b	115	            load_cpu_state(idle->State);
0xffffff8000019c2e	115	            load_cpu_state(idle->State);
0xffffff800001f39e in load_cpu_state ()
0xffffff800001f3a1 in load_cpu_state ()
0xffffff800001f3a2 in load_cpu_state ()
0xffffff800001f3a4 in load_cpu_state ()
0xffffff800001f3a6 in load_cpu_state ()
0xffffff800001f3a8 in load_cpu_state ()
0xffffff800001f3aa in load_cpu_state ()
0xffffff800001f3ac in load_cpu_state ()
0xffffff800001f3ae in load_cpu_state ()
0xffffff800001f3b0 in load_cpu_state ()
0xffffff800001f3b2 in load_cpu_state ()
0xffffff800001f3b3 in load_cpu_state ()
rax            0xffffff800001f39e  -549755685986
rbx            0x0                 0
rcx            0x1                 1
rdx            0x1                 1
rsi            0x20                32
rdi            0x0                 0
rbp            0xffffff8000031e50  0xffffff8000031e50
rsp            0xffffff90000ffff8  0xffffff90000ffff8
r8             0x0                 0
r9             0x0                 0
r10            0x0                 0
r11            0x0                 0
r12            0x0                 0
r13            0x0                 0
r14            0x0                 0
r15            0x0                 0
rip            0xffffff800001f3b3  0xffffff800001f3b3 <load_cpu_state+21>
eflags         0x200083            [ ID IOPL=0 SF CF ]
cs             0x8                 8
ss             0x0                 0
ds             0x0                 0
es             0x0                 0
fs             0x18                24
gs             0x18                24
fs_base        0x0                 0
gs_base        0x0                 0
k_gs_base      0x0                 0
cr0            0x80010011          [ PG WP ET PE ]
cr2            0x0                 0
cr3            0x3a000             [ PDBR=0 PCID=0 ]
cr4            0x220               [ OSFXSR PAE ]
cr8            0x0                 0
efer           0x500               [ LMA LME ]
xmm0           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm1           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm2           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm3           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm4           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm5           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm6           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm7           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm8           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm9           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm10          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm11          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm12          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm13          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm14          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm15          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
mxcsr          0x1f80              [ IM DM ZM OM UM PM ]
rax            0xffffff800001f39e  -549755685986
rbx            0x0                 0
rcx            0x1                 1
rdx            0x1                 1
rsi            0x20                32
rdi            0x0                 0
rbp            0xffffff8000031e50  0xffffff8000031e50
rsp            0xffffff90000ffff8  0xffffff90000ffff8
r8             0x0                 0
r9             0x0                 0
r10            0x0                 0
r11            0x0                 0
r12            0x0                 0
r13            0x0                 0
r14            0x0                 0
r15            0x0                 0
rip            0xffffff800001f3b3  0xffffff800001f3b3 <load_cpu_state+21>
eflags         0x200083            [ ID IOPL=0 SF CF ]
cs             0x8                 8
ss             0x0                 0
ds             0x0                 0
es             0x0                 0
fs             0x18                24
gs             0x18                24
fs_base        0x0                 0
gs_base        0x0                 0
k_gs_base      0x0                 0
cr0            0x80010011          [ PG WP ET PE ]
cr2            0x0                 0
cr3            0x3a000             [ PDBR=0 PCID=0 ]
cr4            0x220               [ OSFXSR PAE ]
cr8            0x0                 0
efer           0x500               [ LMA LME ]
xmm0           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm1           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm2           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm3           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm4           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm5           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm6           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm7           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm8           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm9           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm10          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm11          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm12          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm13          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm14          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm15          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
mxcsr          0x1f80              [ IM DM ZM OM UM PM ]
0xffffff800001f3b4 in load_cpu_state ()
0xffffff800001f3b5 in load_cpu_state ()
0xffffff800001f3b6 in load_cpu_state ()
0xffffff800001f3b7 in load_cpu_state ()
0xffffff800001f3b8 in load_cpu_state ()
Scheduler::idleTask () at src/kernel/scheduling/scheduler.cpp:73
73	    void idleTask(){
0xffffff800001982b	73	    void idleTask(){
rax            0x0                 0
rbx            0x0                 0
rcx            0x0                 0
rdx            0x0                 0
rsi            0x0                 0
rdi            0x0                 0
rbp            0x0                 0x0
rsp            0xffffff9000100048  0xffffff9000100048
r8             0x0                 0
r9             0x0                 0
r10            0x0                 0
r11            0x0                 0
r12            0x0                 0
r13            0x0                 0
r14            0x0                 0
r15            0x0                 0
rip            0xffffff800001982b  0xffffff800001982b <Scheduler::idleTask()+4>
eflags         0x202               [ IOPL=0 IF ]
cs             0x8                 8
ss             0x0                 0
ds             0x0                 0
es             0x0                 0
fs             0x18                24
gs             0x18                24
fs_base        0x0                 0
gs_base        0x0                 0
k_gs_base      0x0                 0
cr0            0x80010011          [ PG WP ET PE ]
cr2            0x0                 0
cr3            0x3a000             [ PDBR=0 PCID=0 ]
cr4            0x220               [ OSFXSR PAE ]
cr8            0x0                 0
efer           0x500               [ LMA LME ]
xmm0           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm1           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm2           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm3           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm4           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm5           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm6           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm7           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm8           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm9           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm10          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm11          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm12          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm13          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm14          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm15          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
mxcsr          0x1f80              [ IM DM ZM OM UM PM ]
Detaching from program: , process 1
Remote communication error.  Target disconnected.: Broken pipe.

Breakpoint 3, Scheduler::Schedule (state=0xc00000) at src/kernel/scheduling/scheduler.cpp:105
105	    void Schedule(cpu_state* state){
No symbol "load_cput_state" in current context.
Dump of assembler code for function load_cpu_state:
   0xffffff800001f39e <+0>:	mov    %rdi,%rsp
   0xffffff800001f3a1 <+3>:	pop    %rbx
   0xffffff800001f3a2 <+4>:	pop    %r15
   0xffffff800001f3a4 <+6>:	pop    %r14
   0xffffff800001f3a6 <+8>:	pop    %r13
   0xffffff800001f3a8 <+10>:	pop    %r12
   0xffffff800001f3aa <+12>:	pop    %r11
   0xffffff800001f3ac <+14>:	pop    %r10
   0xffffff800001f3ae <+16>:	pop    %r9
   0xffffff800001f3b0 <+18>:	pop    %r8
   0xffffff800001f3b2 <+20>:	pop    %rdi
   0xffffff800001f3b3 <+21>:	pop    %rsi
   0xffffff800001f3b4 <+22>:	pop    %rbp
   0xffffff800001f3b5 <+23>:	pop    %rdx
   0xffffff800001f3b6 <+24>:	pop    %rcx
   0xffffff800001f3b7 <+25>:	pop    %rax
   0xffffff800001f3b8 <+26>:	iretq  
End of assembler dump.
Detaching from program: , process 1
Remote communication error.  Target disconnected.: Broken pipe.

Breakpoint 3, Scheduler::Schedule (state=0xc00000) at src/kernel/scheduling/scheduler.cpp:105
105	    void Schedule(cpu_state* state){
Continuing.

Breakpoint 4, 0xffffff800001f3b8 in load_cpu_state ()
rax            0x0                 0
rbx            0x0                 0
rcx            0x0                 0
rdx            0x0                 0
rsi            0x0                 0
rdi            0x0                 0
rbp            0x0                 0x0
rsp            0xffffff9000100020  0xffffff9000100020
r8             0x0                 0
r9             0x0                 0
r10            0x0                 0
r11            0x0                 0
r12            0x0                 0
r13            0x0                 0
r14            0x0                 0
r15            0x0                 0
rip            0xffffff800001f3b8  0xffffff800001f3b8 <load_cpu_state+26>
eflags         0x200083            [ ID IOPL=0 SF CF ]
cs             0x8                 8
ss             0x0                 0
ds             0x0                 0
es             0x0                 0
fs             0x18                24
gs             0x18                24
fs_base        0x0                 0
gs_base        0x0                 0
k_gs_base      0x0                 0
cr0            0x80010011          [ PG WP ET PE ]
cr2            0x0                 0
cr3            0x3a000             [ PDBR=0 PCID=0 ]
cr4            0x220               [ OSFXSR PAE ]
cr8            0x0                 0
efer           0x500               [ LMA LME ]
xmm0           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm1           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm2           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm3           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm4           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm5           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm6           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm7           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm8           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm9           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm10          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm11          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm12          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm13          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm14          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm15          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
mxcsr          0x1f80              [ IM DM ZM OM UM PM ]
Continuing.

Breakpoint 3, Scheduler::Schedule (state=0x0) at src/kernel/scheduling/scheduler.cpp:105
105	    void Schedule(cpu_state* state){
Continuing.

Breakpoint 4, 0xffffff800001f3b8 in load_cpu_state ()
rax            0xffffff8000019827  -549755709401
rbx            0x0                 0
rcx            0x0                 0
rdx            0x0                 0
rsi            0x0                 0
rdi            0x0                 0
rbp            0x0                 0x0
rsp            0xffffff9000100020  0xffffff9000100020
r8             0x0                 0
r9             0x0                 0
r10            0x0                 0
r11            0x0                 0
r12            0x0                 0
r13            0x0                 0
r14            0x0                 0
r15            0x0                 0
rip            0xffffff800001f3b8  0xffffff800001f3b8 <load_cpu_state+26>
eflags         0x83                [ IOPL=0 SF CF ]
cs             0x8                 8
ss             0x0                 0
ds             0x0                 0
es             0x0                 0
fs             0x18                24
gs             0x18                24
fs_base        0x0                 0
gs_base        0x0                 0
k_gs_base      0x0                 0
cr0            0x80010011          [ PG WP ET PE ]
cr2            0x0                 0
cr3            0x3a000             [ PDBR=0 PCID=0 ]
cr4            0x220               [ OSFXSR PAE ]
cr8            0x0                 0
efer           0x500               [ LMA LME ]
xmm0           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm1           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm2           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm3           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm4           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm5           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm6           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm7           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm8           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm9           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm10          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm11          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm12          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm13          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm14          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm15          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
mxcsr          0x1f80              [ IM DM ZM OM UM PM ]
Detaching from program: , process 1
Remote communication error.  Target disconnected.: Broken pipe.

Breakpoint 3, Scheduler::Schedule (state=0xc00000) at src/kernel/scheduling/scheduler.cpp:105
warning: Source file is more recent than executable.
105	    void Schedule(cpu_state* state){
106	        if(currentTask != -1){
108	        } else if(idle->IsAlive){
112	        if(taskCount == 0){
Detaching from program: , process 1
Remote communication error.  Target disconnected.: Broken pipe.

Breakpoint 3, Scheduler::Schedule (state=0xc00000) at src/kernel/scheduling/scheduler.cpp:105
105	    void Schedule(cpu_state* state){
106	        if(currentTask != -1){
108	        } else if(idle->IsAlive){
109	            idle->State = state;
112	        if(taskCount == 0){
113	            currentTask = -1;
Continuing.

Breakpoint 4, 0xffffff800001f3b8 in load_cpu_state ()
Continuing.

Breakpoint 3, Scheduler::Schedule (state=0xffffff8000031e90) at src/kernel/scheduling/scheduler.cpp:105
105	    void Schedule(cpu_state* state){
Continuing.

Breakpoint 4, 0xffffff800001f3b8 in load_cpu_state ()
Continuing.

Breakpoint 3, Scheduler::Schedule (state=0xffffff8000031e90) at src/kernel/scheduling/scheduler.cpp:105
105	    void Schedule(cpu_state* state){
Please answer y or n.
Detaching from program: , process 1
Remote communication error.  Target disconnected.: Broken pipe.

Breakpoint 3, Scheduler::Schedule (state=0xc00000) at src/kernel/scheduling/scheduler.cpp:105
105	    void Schedule(cpu_state* state){
Continuing.

Breakpoint 4, 0xffffff800001f3b8 in load_cpu_state ()
Continuing.

Breakpoint 3, Scheduler::Schedule (state=0xffffff8000031e90) at src/kernel/scheduling/scheduler.cpp:105
105	    void Schedule(cpu_state* state){
Continuing.

Breakpoint 4, 0xffffff800001f3b8 in load_cpu_state ()
rax            0xffffff90003fffc0  -481032142912
rbx            0xffffff80000393a0  -549755579488
rcx            0xffffff9000300060  -481033191328
rdx            0xffffff9000400060  -481032142752
rsi            0x100000            1048576
rdi            0xffffff80000211dc  -549755678244
rbp            0xffffff8000032008  0xffffff8000032008
rsp            0xffffff8000031f08  0xffffff8000031f08
r8             0xffffff80000393a0  -549755579488
r9             0x0                 0
r10            0x0                 0
r11            0x1ffc4             131012
r12            0x0                 0
r13            0x0                 0
r14            0x0                 0
r15            0xffffff80000393a0  -549755579488
rip            0xffffff800001f3b8  0xffffff800001f3b8 <load_cpu_state+26>
eflags         0x200083            [ ID IOPL=0 SF CF ]
cs             0x8                 8
ss             0x0                 0
ds             0x0                 0
es             0x0                 0
fs             0x18                24
gs             0x18                24
fs_base        0x0                 0
gs_base        0x0                 0
k_gs_base      0x0                 0
cr0            0x80010011          [ PG WP ET PE ]
cr2            0x0                 0
cr3            0x3a000             [ PDBR=0 PCID=0 ]
cr4            0x220               [ OSFXSR PAE ]
cr8            0x0                 0
efer           0x500               [ LMA LME ]
xmm0           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm1           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm2           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm3           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm4           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm5           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm6           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm7           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm8           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm9           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm10          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm11          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm12          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm13          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm14          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
xmm15          {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}
mxcsr          0x1f80              [ IM DM ZM OM UM PM ]
kernel_main (info=...) at src/kernel/main.cpp:252
252	}
prekernel (multiboot_info_addr=1186432) at src/kernel/main.cpp:75
75	}

Breakpoint 3, Scheduler::Schedule (state=0xffffff9000300060) at src/kernel/scheduling/scheduler.cpp:105
105	    void Schedule(cpu_state* state){
106	        if(currentTask != -1){
108	        } else if(idle->IsAlive){
109	            idle->State = state;
112	        if(taskCount == 0){
113	            currentTask = -1;
114	            idle->CpuTime++;
115	            load_cpu_state(idle->State);

Breakpoint 4, 0xffffff800001f3b8 in load_cpu_state ()
Single stepping until exit from function load_cpu_state,
which has no line number information.

Breakpoint 3, Scheduler::Schedule (state=0xffffff8000032010) at src/kernel/scheduling/scheduler.cpp:105
105	    void Schedule(cpu_state* state){
106	        if(currentTask != -1){
108	        } else if(idle->IsAlive){
109	            idle->State = state;
112	        if(taskCount == 0){
113	            currentTask = -1;
114	            idle->CpuTime++;
115	            load_cpu_state(idle->State);

Breakpoint 4, 0xffffff800001f3b8 in load_cpu_state ()
Single stepping until exit from function load_cpu_state,
which has no line number information.

Breakpoint 3, Scheduler::Schedule (state=0xffffff8000032010) at src/kernel/scheduling/scheduler.cpp:105
105	    void Schedule(cpu_state* state){
106	        if(currentTask != -1){
108	        } else if(idle->IsAlive){
109	            idle->State = state;
112	        if(taskCount == 0){
113	            currentTask = -1;
114	            idle->CpuTime++;
115	            load_cpu_state(idle->State);

Breakpoint 4, 0xffffff800001f3b8 in load_cpu_state ()
Single stepping until exit from function load_cpu_state,
which has no line number information.

Breakpoint 3, Scheduler::Schedule (state=0xffffff8000032010) at src/kernel/scheduling/scheduler.cpp:105
105	    void Schedule(cpu_state* state){
106	        if(currentTask != -1){
108	        } else if(idle->IsAlive){
109	            idle->State = state;
112	        if(taskCount == 0){
113	            currentTask = -1;
114	            idle->CpuTime++;
115	            load_cpu_state(idle->State);

Breakpoint 4, 0xffffff800001f3b8 in load_cpu_state ()
Single stepping until exit from function load_cpu_state,
which has no line number information.

Breakpoint 3, Scheduler::Schedule (state=0xffffff8000032010) at src/kernel/scheduling/scheduler.cpp:105
105	    void Schedule(cpu_state* state){
106	        if(currentTask != -1){
108	        } else if(idle->IsAlive){
109	            idle->State = state;
112	        if(taskCount == 0){
113	            currentTask = -1;
114	            idle->CpuTime++;
115	            load_cpu_state(idle->State);

Breakpoint 4, 0xffffff800001f3b8 in load_cpu_state ()
Single stepping until exit from function load_cpu_state,
which has no line number information.

Breakpoint 3, Scheduler::Schedule (state=0xffffff8000032010) at src/kernel/scheduling/scheduler.cpp:105
105	    void Schedule(cpu_state* state){
106	        if(currentTask != -1){
108	        } else if(idle->IsAlive){
109	            idle->State = state;
112	        if(taskCount == 0){
113	            currentTask = -1;
114	            idle->CpuTime++;
115	            load_cpu_state(idle->State);

Breakpoint 4, 0xffffff800001f3b8 in load_cpu_state ()
Single stepping until exit from function load_cpu_state,
which has no line number information.

Breakpoint 3, Scheduler::Schedule (state=0xffffff8000032010) at src/kernel/scheduling/scheduler.cpp:105
105	    void Schedule(cpu_state* state){
106	        if(currentTask != -1){
108	        } else if(idle->IsAlive){
Continuing.

Breakpoint 4, 0xffffff800001f3b8 in load_cpu_state ()
Continuing.

Breakpoint 3, Scheduler::Schedule (state=0xffffff8000032010) at src/kernel/scheduling/scheduler.cpp:105
105	    void Schedule(cpu_state* state){
Quit
Detaching from program: , process 1
Remote communication error.  Target disconnected.: Broken pipe.

Breakpoint 3, Scheduler::Schedule (state=0xffffff8000031e08) at src/kernel/scheduling/scheduler.cpp:101
101	    void Schedule(cpu_state* state){
No symbol "ffffff80000114e1" in current context.
No symbol "ffffff80000114e1" in current context.
Dump of assembler code for function UI::Graphics::DesktopService::Update():
   0xffffff800001147f <+0>:	endbr64 
   0xffffff8000011483 <+4>:	push   %rbp
   0xffffff8000011484 <+5>:	mov    %rsp,%rbp
   0xffffff8000011487 <+8>:	push   %r15
   0xffffff8000011489 <+10>:	push   %rbx
   0xffffff800001148a <+11>:	sub    $0x30,%rsp
   0xffffff800001148e <+15>:	endbr64 
   0xffffff8000011492 <+19>:	lea    -0xb(%rip),%rbx        # 0xffffff800001148e <UI::Graphics::DesktopService::Update()+15>
   0xffffff8000011499 <+26>:	movabs $0x27f2a,%r11
   0xffffff80000114a3 <+36>:	add    %r11,%rbx
   0xffffff80000114a6 <+39>:	movl   $0x0,-0x14(%rbp)
   0xffffff80000114ad <+46>:	movabs $0xfffffffffffe6268,%rax
   0xffffff80000114b7 <+56>:	mov    (%rbx,%rax,1),%eax
   0xffffff80000114ba <+59>:	cmp    %eax,-0x14(%rbp)
   0xffffff80000114bd <+62>:	jge    0xffffff80000115cf <UI::Graphics::DesktopService::Update()+336>
   0xffffff80000114c3 <+68>:	movabs $0xfffffffffffe6068,%rdx
   0xffffff80000114cd <+78>:	mov    -0x14(%rbp),%eax
   0xffffff80000114d0 <+81>:	cltq   
   0xffffff80000114d2 <+83>:	add    %rbx,%rdx
   0xffffff80000114d5 <+86>:	mov    (%rdx,%rax,8),%rax
   0xffffff80000114d9 <+90>:	mov    %rax,-0x38(%rbp)
   0xffffff80000114dd <+94>:	mov    -0x38(%rbp),%rax
   0xffffff80000114e1 <+98>:	movzbl 0x10(%rax),%eax
   0xffffff80000114e5 <+102>:	test   %al,%al
   0xffffff80000114e7 <+104>:	je     0xffffff80000115c6 <UI::Graphics::DesktopService::Update()+327>
   0xffffff80000114ed <+110>:	mov    -0x38(%rbp),%rax
   0xffffff80000114f1 <+114>:	mov    0xc(%rax),%edx
   0xffffff80000114f4 <+117>:	movabs $0xffffffffffffffb8,%rax
   0xffffff80000114fe <+127>:	mov    (%rbx,%rax,1),%rax
   0xffffff8000011502 <+131>:	movzwl (%rax),%eax
   0xffffff8000011505 <+134>:	movzwl %ax,%eax
   0xffffff8000011508 <+137>:	imul   %edx,%eax
   0xffffff800001150b <+140>:	shl    $0x2,%eax
   0xffffff800001150e <+143>:	movslq %eax,%rdx
   0xffffff8000011511 <+146>:	mov    -0x38(%rbp),%rax
   0xffffff8000011515 <+150>:	mov    0x8(%rax),%eax
   0xffffff8000011518 <+153>:	shl    $0x2,%eax
   0xffffff800001151b <+156>:	cltq   
   0xffffff800001151d <+158>:	add    %rax,%rdx
   0xffffff8000011520 <+161>:	movabs $0xffffffd000000000,%rax
   0xffffff800001152a <+171>:	add    %rdx,%rax
   0xffffff800001152d <+174>:	mov    %rax,-0x20(%rbp)
   0xffffff8000011531 <+178>:	mov    -0x38(%rbp),%rax
   0xffffff8000011535 <+182>:	mov    (%rax),%rax
   0xffffff8000011538 <+185>:	mov    %rax,-0x28(%rbp)
   0xffffff800001153c <+189>:	mov    -0x38(%rbp),%rax
   0xffffff8000011540 <+193>:	mov    %rax,%rdi
   0xffffff8000011543 <+196>:	movabs $0xfffffffffffd7f62,%rax
   0xffffff800001154d <+206>:	lea    (%rbx,%rax,1),%rax
   0xffffff8000011551 <+210>:	callq  *%rax
   0xffffff8000011553 <+212>:	mov    %rax,-0x40(%rbp)
   0xffffff8000011557 <+216>:	movl   $0x0,-0x2c(%rbp)
   0xffffff800001155e <+223>:	mov    -0x3c(%rbp),%eax
   0xffffff8000011561 <+226>:	cmp    %eax,-0x2c(%rbp)
   0xffffff8000011564 <+229>:	jge    0xffffff80000115be <UI::Graphics::DesktopService::Update()+319>
   0xffffff8000011566 <+231>:	mov    -0x40(%rbp),%eax
   0xffffff8000011569 <+234>:	shl    $0x2,%eax
   0xffffff800001156c <+237>:	movslq %eax,%rdx
   0xffffff800001156f <+240>:	mov    -0x28(%rbp),%rcx
   0xffffff8000011573 <+244>:	mov    -0x20(%rbp),%rax
   0xffffff8000011577 <+248>:	mov    %rcx,%rsi
   0xffffff800001157a <+251>:	mov    %rax,%rdi
   0xffffff800001157d <+254>:	mov    %rbx,%r15
   0xffffff8000011580 <+257>:	movabs $0xfffffffffffe0107,%rax
   0xffffff800001158a <+267>:	add    %rbx,%rax
   0xffffff800001158d <+270>:	callq  *%rax
   0xffffff800001158f <+272>:	movabs $0xffffffffffffffb8,%rax
   0xffffff8000011599 <+282>:	mov    (%rbx,%rax,1),%rax
   0xffffff800001159d <+286>:	movzwl (%rax),%eax
   0xffffff80000115a0 <+289>:	movzwl %ax,%eax
   0xffffff80000115a3 <+292>:	shl    $0x2,%eax
   0xffffff80000115a6 <+295>:	cltq   
   0xffffff80000115a8 <+297>:	add    %rax,-0x20(%rbp)
   0xffffff80000115ac <+301>:	mov    -0x40(%rbp),%eax
   0xffffff80000115af <+304>:	shl    $0x2,%eax
   0xffffff80000115b2 <+307>:	cltq   
   0xffffff80000115b4 <+309>:	add    %rax,-0x28(%rbp)
   0xffffff80000115b8 <+313>:	addl   $0x1,-0x2c(%rbp)
   0xffffff80000115bc <+317>:	jmp    0xffffff800001155e <UI::Graphics::DesktopService::Update()+223>
   0xffffff80000115be <+319>:	mov    -0x38(%rbp),%rax
   0xffffff80000115c2 <+323>:	movb   $0x0,0x10(%rax)
   0xffffff80000115c6 <+327>:	addl   $0x1,-0x14(%rbp)
   0xffffff80000115ca <+331>:	jmpq   0xffffff80000114ad <UI::Graphics::DesktopService::Update()+46>
   0xffffff80000115cf <+336>:	nop
   0xffffff80000115d0 <+337>:	add    $0x30,%rsp
   0xffffff80000115d4 <+341>:	pop    %rbx
   0xffffff80000115d5 <+342>:	pop    %r15
   0xffffff80000115d7 <+344>:	pop    %rbp
   0xffffff80000115d8 <+345>:	retq   
End of assembler dump.
Function "Terminal::Println("Window 2 set up");" not defined.
Function "0xffffff80000114e1" not defined.
0xffffff80000114e1 is in UI::Graphics::DesktopService::Update() (src/interface/graphics/desktop_service.cpp:43).
warning: Source file is more recent than executable.
38	                        windowLock.Unlock();
39	                        return windows[i];
40	                    }
41	                }
42	
43	                windowLock.Unlock();
44	                return nullptr;
45	            }
46	
47	            void Update(){
Detaching from program: , process 1
Remote communication error.  Target disconnected.: Broken pipe.
[Inferior 1 (process 1) exited normally]

Breakpoint 3, DesktopTask () at src/kernel/main.cpp:195
195	        Scheduler::Schedule(t->State);
Scheduler::Schedule (state=0x0) at src/kernel/scheduling/scheduler.cpp:101
101	    void Schedule(cpu_state* state){
102	        if(currentTask != -1){
103	            Tasks[currentTask].State = state;
108	        if(taskCount == 0){
114	        bool nextTaskFound = false;
115	        int nextTask = -1;
117	        for(int i = 1; i <= taskCount; i++){
118	            Task* t = &Tasks[(currentTask + i) % taskCount];
119	            if(t->IsAlive){
120	                if(t->ShouldStop){
129	                if(t->IsSleeping()){
Task::IsSleeping (this=0x0) at src/kernel/scheduling/scheduler.cpp:44
44	bool Task::IsSleeping(){
45	    return SleepTicks > 0;
46	}
Scheduler::Schedule (state=0xffffff90006fffd8) at src/kernel/scheduling/scheduler.cpp:129
129	                if(t->IsSleeping()){
131	                } else if(!nextTaskFound){
132	                    nextTaskFound = true;
133	                    nextTask = (currentTask + i) % taskCount;
117	        for(int i = 1; i <= taskCount; i++){
118	            Task* t = &Tasks[(currentTask + i) % taskCount];
119	            if(t->IsAlive){
120	                if(t->ShouldStop){
129	                if(t->IsSleeping()){
Task::IsSleeping (this=0xffffff80000212a0 <Scheduler::Tasks>) at src/kernel/scheduling/scheduler.cpp:44
44	bool Task::IsSleeping(){
45	    return SleepTicks > 0;
46	}
Scheduler::Schedule (state=0xffffff90006fffd8) at src/kernel/scheduling/scheduler.cpp:129
129	                if(t->IsSleeping()){
131	                } else if(!nextTaskFound){
117	        for(int i = 1; i <= taskCount; i++){
118	            Task* t = &Tasks[(currentTask + i) % taskCount];
119	            if(t->IsAlive){
120	                if(t->ShouldStop){
129	                if(t->IsSleeping()){
Task::IsSleeping (this=0xffffff80000212d8 <Scheduler::Tasks+56>) at src/kernel/scheduling/scheduler.cpp:44
44	bool Task::IsSleeping(){
45	    return SleepTicks > 0;
46	}
Scheduler::Schedule (state=0xffffff90006fffd8) at src/kernel/scheduling/scheduler.cpp:129
129	                if(t->IsSleeping()){
131	                } else if(!nextTaskFound){
117	        for(int i = 1; i <= taskCount; i++){
118	            Task* t = &Tasks[(currentTask + i) % taskCount];
119	            if(t->IsAlive){
120	                if(t->ShouldStop){
129	                if(t->IsSleeping()){
Task::IsSleeping (this=0xffffff8000021310 <Scheduler::Tasks+112>) at src/kernel/scheduling/scheduler.cpp:44
44	bool Task::IsSleeping(){
45	    return SleepTicks > 0;
46	}
Scheduler::Schedule (state=0xffffff90006fffd8) at src/kernel/scheduling/scheduler.cpp:129
129	                if(t->IsSleeping()){
130	                    t->SleepTicks--;
117	        for(int i = 1; i <= taskCount; i++){
138	        if(nextTaskFound){
139	            currentTask = nextTask;
140	            Tasks[currentTask].CpuTime++;
141	            load_cpu_state(Tasks[currentTask].State);
[Inferior 1 (process 1) exited normally]
The program is not being run.
The program is not being run.

Program received signal SIGINT, Interrupt.
Task::Wait (milliseconds=50) at src/kernel/scheduling/scheduler.cpp:48
48	    while(t->SleepTicks > 0);
Dump of assembler code for function load_cpu_state:
   0xffffff800001f397 <+0>:	mov    %rdi,%rsp
   0xffffff800001f39a <+3>:	pop    %rbx
   0xffffff800001f39b <+4>:	pop    %r15
   0xffffff800001f39d <+6>:	pop    %r14
   0xffffff800001f39f <+8>:	pop    %r13
   0xffffff800001f3a1 <+10>:	pop    %r12
   0xffffff800001f3a3 <+12>:	pop    %r11
   0xffffff800001f3a5 <+14>:	pop    %r10
   0xffffff800001f3a7 <+16>:	pop    %r9
   0xffffff800001f3a9 <+18>:	pop    %r8
   0xffffff800001f3ab <+20>:	pop    %rdi
   0xffffff800001f3ac <+21>:	pop    %rsi
   0xffffff800001f3ad <+22>:	pop    %rbp
   0xffffff800001f3ae <+23>:	pop    %rdx
   0xffffff800001f3af <+24>:	pop    %rcx
   0xffffff800001f3b0 <+25>:	pop    %rax
   0xffffff800001f3b1 <+26>:	iretq  
End of assembler dump.
